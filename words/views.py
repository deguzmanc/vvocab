# from django import forms
# from django.http import HttpResponse, HttpResponseRedirect
# from django.forms import ValidationError
from allauth.account.views import SignupView, LoginView
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required


from youtube_transcript_api import YouTubeTranscriptApi

# import form class from django
# from django import forms

# import Video from models.py
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from .forms import SignupForm, LoginForm, TranscriptForm, VideoForm


def index(request):
  context = {}
  context["form"] = VideoForm()
  return render(request, "index.html", context)


def user_signup(request):
  if request.method == 'POST':
    form = SignupForm(request.POST)
    if form.is_valid():
      form.save()
      return redirect('login')
  else:
    form = SignupForm()
  return render(request, 'signup.html', {'form': form})

# login page


def user_login(request):
  # from allauth.socialaccount.templatetags.socialaccount import get_providers
  # res = get_providers({"request": request})
  # return HttpResponse(res)

  if request.method == 'POST':
    form = LoginForm(request.POST)
    if form.is_valid():
      username = form.cleaned_data['username']
      password = form.cleaned_data['password']
      user = authenticate(request, username=username, password=password)
      if user:
        login(request, user)
        return redirect('index')
  else:
    form = LoginForm()
  return render(request, 'login.html', {'form': form})

# logout page


def user_logout(request):
  logout(request)
  return redirect('login')


@require_POST
def submitlink(request):
  context = {}

  # create a form instance and populate it with data from the request:
  form = VideoForm(request.POST)
  # context['form'] = form

  # check whether it's valid:
  if form.is_valid():
    video = form.save(commit=False)
    video.setTitlefromUrl()
    context['video'] = video

    transcript_list = YouTubeTranscriptApi.list_transcripts(
        video.getVideoId())
    # for transcript in transcript_list:
    #   # the Transcript object provides metadata properties
    #   print(
    #       transcript.language,
    #       transcript.language_code,
    #       # whether it has been manually created or generated by YouTube
    #       transcript.is_generated,
    #   )
    context['languages'] = transcript_list

    return render(request, "submit-results.html", context)

  # ValidationError
  context = {}
  # for type in form.errors.as_data():
  #   print(type)
  #   for message in form.errors.as_data()[type]:
  #     print(type(message.error_list()))
  # print(form.errors.as_data()['url'])
  # .as_data() #if form.has_error('url') else {'url' : ['Please enter a valid youtube link.']}
  context['error'] = form.errors
  return render(request, "error.html", context)


def gettranscript(request):

  transcript_form = TranscriptForm(request.POST)
  print(transcript_form)
  context = {'form': transcript_form}
  return render(request, "transcript.html", context)

# def video(request):
#    return render(request, "video-page.html")


def video(request, id=None):
  if id is None:
    return render(request, "video-page.html")
  context = {}
  context["id"] = id
  return render(request, "video-page.html", context)


@login_required
def profile(request):
  return render(request, "allauth/profile.html")


class MySignupView(SignupView):
  template_name = 'allauth/signup.html'


class MyLoginView(LoginView):
  template_name = 'allauth/login.html'
